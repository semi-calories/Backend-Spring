# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle 

on:
  push:
    branches: [ "feature/49-cicd" ]
  pull_request:
    branches: [ "feature/49-cicd" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    # 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v4

    # 1) git ignore에 등록된 application.properties 파일 생성
    - name: make application.properties
      run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES }}" > ./application.yml
      shell: bash
      
    # 2) spring project jar file build
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Build with Gradle
      run: ./gradlew build

    # 3) docker hub에 image push
    - name: Docker build
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-semicalorie . 
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-semicalorie

    # 4) docker hub에 push한 이미지를 서버에 받아와서 run
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              docker pull ${{ secrets.DOCKER_USERNAME }}/docker-semicalorie
              docker stop $(docker ps -a -q)
              docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/docker-semicalorie
              # docker rm $(docker ps --filter 'status=exited' -a -q)
              # docker image prune -a -f
                  
      
    
